/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/* unknown exports provided */
/* all exports used */
/*!*********************************!*\
  !*** ./src/vanilla_mkap.min.js ***!
  \*********************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n// std namespace\nvar std = function () {\n\n    function is_close(a, b, rel_tol, abs_tol) {\n\n        var diff = Math.abs(a - b);\n        if (diff <= abs_tol) {\n            return true;\n        }\n        if (Math.abs(a) < Math.abs(b)) {\n            return diff <= Math.abs(b) * rel_tol;\n        } else {\n            return diff <= Math.abs(a) * rel_tol;\n        }\n    }\n\n    function is_number(obj) {\n        return !isNaN(parseFloat(obj));\n    }\n\n    function interpolate(start_x, start_y, end_x, end_y, req_x) {\n        /**\r\n        Determinates the y-value by interpolation for the given x- and y-values.\r\n        Does also extrapolate\r\n        */\n\n        // Differencte between end point and start point\n        var dx = end_x - start_x;\n        var dy = end_y - start_y;\n\n        // difference between requested points value and start points value\n        var delta_x = req_x - start_x;\n        var factor = delta_x / dx;\n        var delta_y = factor * dy;\n\n        return start_y + delta_y;\n    }\n\n    function convergence(lhs, rhs, div) {\n        /**Converting by adapting one value by a factor. The factor is determined by the ratio of the left hand side and\r\n         * the right hand side of the equation.\r\n         *\r\n         * Factor: ((Left / Right) - 1) / div + 1\r\n         *\r\n         * @param rhs: {float} Value\r\n         * @param lhs: {float} Value\r\n         *\r\n         * Convergence = lhs *= factor\r\n        */\n        // default parameter\n        div = typeof div !== \"undefined\" ? div : 3;\n\n        var ratio = Math.abs(rhs) / Math.abs(lhs);\n        return (ratio - 1) / div + 1;\n    }\n\n    function convergence_conditions(lhs, rhs, limit_up, limit_lower) {\n        // default parameter\n        limit_up = typeof limit_up !== \"undefined\" ? limit_up : 1.001;\n        limit_lower = typeof limit_lower !== \"undefined\" ? limit_lower : 0.999;\n\n        var ratio = Math.abs(rhs) / Math.abs(lhs);\n        return limit_lower <= ratio && ratio <= limit_up;\n    }\n\n    function nearest_index(arr, x) {\n        /* \r\n        Return the nearest indexes of an array.\r\n        */\n        var lower = [];\n        var higher = [];\n\n        arr.forEach(function (val) {\n            val < x && lower.push(val) || val > x && higher.push(val);\n        });\n        return { \"low\": arr.indexOf(Math.max.apply(null, lower)), \"high\": arr.indexOf(Math.min.apply(null, higher)) };\n    }\n\n    function linspace(a, b, n) {\n        if (typeof n === 'undefined') n = Math.max(Math.round(b - a) + 1, 1);\n        if (n < 2) {\n            return n === 1 ? [a] : [];\n        }\n        var i,\n            ret = Array(n);\n        n--;\n        for (i = n; i >= 0; i--) {\n            ret[i] = (i * b + (n - i) * a) / n;\n        }\n        return ret;\n    }\n\n    // return from namespace\n    return {\n        interpolate: interpolate,\n        convergence: convergence,\n        convergence_conditions: convergence_conditions,\n        is_number: is_number,\n        nearest_index: nearest_index,\n        is_close: is_close,\n        linspace: linspace\n    };\n}(); // std namespace\n\n\n'use strict';\n\n// vector namespace\nvar vector = function () {\n\n    var DEBUG = false;\n\n    //class\n    function Point(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    Point.prototype.modulus = function () {\n        return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));\n    };\n\n    Point.prototype.negative = function () {\n        return new Point(-this.x, -this.y);\n    };\n\n    Point.prototype.rotate_origin = function (alpha) {\n        var radius = this.modulus();\n        var alpha0 = this.angle_orgin_x_axis();\n        var new_p = new Point(0, 0);\n        new_p.displace_polar(alpha + alpha0, radius);\n        return new_p;\n    };\n\n    Point.prototype.displace_polar = function (alpha, radius) {\n        this.x += Math.cos(alpha) * radius;\n        this.y += Math.sin(alpha) * radius;\n    };\n\n    Point.prototype.angle_orgin_x_axis = function () {\n        /**\r\n        Determine the angle between the origin (x-axis=0, z-axis=0) and the point.\r\n        */\n\n        if (this.y == 0) {\n            // horizontal\n            if (this.x > 0) {\n                var alpha = 0;\n            } else {\n                alpha = Math.PI;\n            }\n        } else if (this.x == 0) {\n            // vertical\n            if (this.y > 0) {\n                alpha = 0.5 * Math.PI;\n            } else {\n                alpha = 1.5 * Math.PI;\n            }\n        } else if (this.x > 0 && this.y > 0) {\n            // quadrant 1\n            alpha = Math.atan(Math.abs(this.y / this.x));\n        } else if (this.x < 0 && 0 < this.y) {\n            // quadrant 2\n            alpha = 0.5 * Math.PI + Math.atan(Math.abs(this.x / this.y));\n        } else if (this.x < 0 && this.y < 0) {\n            // quadrant 3\n            alpha = Math.PI + Math.atan(Math.abs(this.y / this.x));\n        } else if (this.x > 0 && 0 > this.y) {\n            // quadrant 4\n            alpha = 1.5 * Math.PI + Math.atan(Math.abs(this.x / this.y));\n        } else {\n            if (DEBUG) {\n                console.log(\"Can not determine the angle of the point with the axes origin\");\n            }\n        }\n\n        return alpha;\n    };\n\n    //end class\n\n\n    function interpolate_points(start_p, end_p, req_p) {\n        /// <param name=\"start_p\" type=\"Object from Point class\">reference value that should be interpolated between</param>\n        /// <param name=\"end_p\" type=\"Object from Point class\">reference value that should be interpolated between</param>\n        /// <param name=\"req_p\" type=\"Object from Point class\">Value that is requested. x or y of the object should be null, on the request time.</param>\n\n        // Differencte between end point and start point\n        var d_x = end_p.x - start_p.x;\n        var d_y = end_p.y - start_p.y;\n\n        if (req_p.y == null) {\n            // difference between requested points value and start points value\n            var delta_x = req_p.x - start_p.x;\n\n            var factor = delta_x / d_x;\n            var delta_y = d_y * factor;\n        } else if (req_p.x == null) {\n            delta_y = req_p.y - start_p.y;\n\n            factor = delta_y / d_y;\n            delta_x = d_x * factor;\n        }\n\n        return new Point(start_p.x + delta_x, start_p.y + delta_y);\n    }\n\n    function lowest_point(point_1, point_2, axis) {\n        /// Returns the lowest point\n        /// <param name=\"axis\" type=\"String\">axis, x or y</param>\n        if (axis == 'x') {\n            if (point_1.x < point_2.x) {\n                return point_1;\n            } else if (point_2.x < point_1.x) {\n                return point_2;\n            } else {\n                console.log(\"points x values are identical\");\n            }\n        } else if (axis == 'y') {\n            if (point_1.y < point_2.y) {\n                return point_1;\n            } else if (point_2.y < point_1.y) {\n                return point_2;\n            } else {\n                return new Point(null, point_1.y);\n            }\n        }\n\n        console.log(\"cannot verify given axis\");\n    }\n\n    function heighest_point(point_1, point_2, axis) {\n        /// Returns the heighest point\n        /// <param name=\"axis\" type=\"String\">axis, x or y</param>\n\n\n        return lowest_point(point_1.negative(), point_2.negative(), axis).negative();\n    }\n\n    return {\n        interpolate_points: interpolate_points,\n        Point: Point,\n        highest_point: heighest_point,\n        lowest_point: lowest_point\n\n    };\n}(); // vector namespace\n'use strict';\n\n// crsn namespace\nvar crsn = function () {\n\n    function PolyGon(point_list) {\n        /// <param name=\"point_list\" type=\"array\">Array with objects from the Point class representing the polygons coordinates</param>\n        this.point_list = point_list;\n        this.n_value = 1000;\n        this.subtractor = null;\n        this.instantiate();\n    }\n\n    PolyGon.prototype.activate_subtractor = function () {\n        this.subtractor.merge_width(this);\n    };\n\n    PolyGon.prototype.instantiate = function () {\n        this.top = this.highest_point('y').y;\n        this.bottom = this.lowest_point('y').y;\n        // all the values on the y-axis\n        this.y_val = this.det_height_array();\n\n        // x_val array has arrays in it representing the results per y_values increment on the y-axis. In these inner arrays are the x-values paired, representing the solid boundaries.\n        this.paired_xvals = [];\n        this.width_array = [];\n        this.return_x_on_axis();\n    };\n\n    PolyGon.prototype.det_height_array = function () {\n        return std.linspace(0, this.top, this.n_value);\n    };\n\n    PolyGon.prototype.lowest_point = function (axis) {\n        /// Find the lowest point on a give axis. \n        /// <param name=\"axis\" type=\"String\">axis, x or y</param>\n\n        var low = this.point_list[0];\n\n        for (var i = 1; i < this.point_list.length; i++) {\n            low = vector.lowest_point(low, this.point_list[i], axis);\n        }\n        return low;\n    };\n\n    PolyGon.prototype.highest_point = function (axis) {\n        var height = this.point_list[0];\n\n        for (var i = 1; i < this.point_list.length; i++) {\n            height = vector.highest_point(height, this.point_list[i], axis);\n        }\n        return height;\n    };\n\n    PolyGon.prototype.return_x_on_axis = function () {\n        /**\r\n        Method for defining the x values of the sections part that hit the polygon sides.\r\n        The y axis is incremented. And with each step the x-axis on this y-value are determined.\r\n        Two x-values means a closed cross section on that y-value. Three or more x-values indicate that\r\n        there is a void in the cross section.\r\n            x1  x2  x3  x4\r\n        _____   _____            y\r\n        |   |   |   |           |\r\n        |   |   |   |           |\r\n        |   |___|   |           |          x\r\n        |___________|           ---------->\r\n           */\n\n        for (var i = 0; i < this.y_val.length; i++) {\n            /** increment a value on the y-axis and search the coordinates of the polygon for crossing edges.\r\n             An edge crosses the x-axis on this y-values height if one coordinate is above and the subsequent/previous\r\n            coordinate is underneath the y-value.\r\n            */\n\n            var y = this.y_val[i] - this.y_val[1] * 0.5;\n\n            // the x_values that intersect the polygon on this y increment.\n            var x_vals = [];\n\n            // iterate through the coordinates\n            for (var a = 0; a < this.point_list.length - 1; a++) {\n                // y-value is between point at index a and point at index a + 1\n                if (this.point_list[a].y >= y == !(this.point_list[a + 1].y >= y)) {\n\n                    var interpolated_point = vector.interpolate_points(this.point_list[a], this.point_list[a + 1], new vector.Point(null, y));\n                    x_vals.push(interpolated_point.x);\n                }\n            }\n            // switch the last index to the front\n            x_vals.sort(function (a, b) {\n                return a - b;\n            });\n            // x_vals contains the x-values. x1 and x2 is solid, x2 and x3 is void, x3 and x4 is solid etc.\n            // Pair the solid x-values like so: [[x1, x2], [x3, x4]]\n\n            var paired_x_vals = [];\n            for (var x = 0; x < x_vals.length; x++) {\n                if ((x + 1) % 2 == 0) {\n                    paired_x_vals.push([x_vals[x - 1], x_vals[x]]);\n                }\n            }\n            this.paired_xvals.push(paired_x_vals);\n\n            // determine the full width on this y-value by summing the dx in the paired lists.\n            var width = 0;\n            for (a = 0; a < paired_x_vals.length; a++) {\n                width += paired_x_vals[a][1] - paired_x_vals[a][0];\n            }\n            this.width_array.push(Math.abs(width));\n        }\n    };\n\n    PolyGon.prototype.area = function () {\n        var dy = this.y_val[1];\n        var area = 0;\n        for (var i = 0; i < this.y_val.length; i++) {\n            area += dy * this.width_array[i];\n        }\n        area = Math.round(area);\n        return Math.abs(area);\n    };\n\n    PolyGon.prototype.zero_line = function () {\n        var dh = (this.top - this.bottom) / this.n_value;\n        var sum_A_h = 0;\n        for (var i in this.width_array) {\n            sum_A_h += dh * this.width_array[i] * this.y_val[i];\n        }\n        return sum_A_h / this.area();\n    };\n\n    // end class\n\n\n    function Circle(radius) {\n        var n = 100;\n        var alpha0 = Math.PI * 2 / n;\n        var pl = [];\n        var p0 = new vector.Point(0, -radius);\n        // translation point. Does nothing else\n        var p_set = new vector.Point(radius, radius);\n        for (var i = 1; i <= n; i++) {\n            var alpha = alpha0 * i;\n\n            var p = p0.rotate_origin(alpha);\n            p = new vector.Point(p.x + p_set.x, p.y + p_set.y);\n\n            pl.push(p);\n        }\n\n        PolyGon.call(this, pl); // call super constructor\n    }\n\n    Circle.prototype = Object.create(PolyGon.prototype);\n    Circle.prototype.constructor = Circle;\n\n    function Subtractor(top, point_list, n_value) {\n        /**\r\n         * @param top (float) Top of the parent cross section (y-value)\r\n         * @param n_value (int) Amount of section in the parent cross section\r\n         */\n        this.point_list = point_list;\n        this.paired_xvals = [];\n        this.width_array = [];\n        this.top = top;\n        this.n_value = n_value;\n        this.y_val = this.det_height_array();\n        this.return_x_on_axis();\n    }\n\n    Subtractor.prototype.merge_width = function (parent) {\n        /**\r\n         * @param parent Object from the parent cross section.\r\n         */\n\n        for (var i in parent.width_array) {\n            parent.width_array[i] -= this.width_array[i];\n\n            // merge the paired x_vals (for the plotter)\n            var x_vals = [];\n            if (this.width_array[i] > 0) {\n\n                //unpack parents paired x_vals\n                for (var j in parent.paired_xvals[i]) {\n                    x_vals.push(parent.paired_xvals[i][j][0]);\n                    x_vals.push(parent.paired_xvals[i][j][1]);\n                }\n                // unpack subtractors paired x_vals\n                for (j in this.paired_xvals[i]) {\n                    x_vals.push(this.paired_xvals[i][j][0]);\n                    x_vals.push(this.paired_xvals[i][j][1]);\n                }\n\n                x_vals.sort(function (a, b) {\n                    return a - b;\n                });\n                // repack them\n                var paired_x_vals = [];\n                for (var x = 0; x < x_vals.length; x++) {\n                    if ((x + 1) % 2 == 0) {\n                        paired_x_vals.push([x_vals[x - 1], x_vals[x]]);\n                    }\n                }\n                parent.paired_xvals[i] = paired_x_vals;\n            }\n        }\n    };\n\n    Subtractor.prototype.return_x_on_axis = PolyGon.prototype.return_x_on_axis;\n    Subtractor.prototype.det_height_array = PolyGon.prototype.det_height_array;\n\n    function Tube(radius_out, radius_in) {\n        var n = 100;\n        var alpha0 = Math.PI * 2 / n;\n        var pl_out = [];\n        var pl_in = [];\n        var p0_out = new vector.Point(0, -radius_out);\n        var p0_in = new vector.Point(0, -radius_in);\n\n        // Translation points. Do nothing else\n        var p_set_in = new vector.Point(radius_out, radius_out);\n        var p_set_out = new vector.Point(radius_out, radius_out);\n\n        for (var i = 1; i <= n + 1; i++) {\n            var alpha = alpha0 * i;\n            var p_out = p0_out.rotate_origin(alpha);\n            p_out = new vector.Point(p_out.x + p_set_out.x, p_out.y + p_set_out.y);\n            var p_in = p0_in.rotate_origin(alpha);\n            p_in = new vector.Point(p_in.x + p_set_in.x, p_in.y + p_set_in.y);\n\n            pl_out.push(p_out);\n            pl_in.push(p_in);\n        }\n        PolyGon.call(this, pl_out);\n\n        this.subtractor = new Subtractor(radius_out * 2, pl_in, this.n_value);\n        this.subtractor.merge_width(this);\n    }\n\n    Tube.prototype = Object.create(PolyGon.prototype);\n    Tube.prototype.constructor = Tube;\n\n    // return from namespace\n    return {\n        PolyGon: PolyGon,\n        Circle: Circle,\n        Tube: Tube,\n        Subtractor: Subtractor\n    };\n}(); // crsn namespace\n'use strict';\nvar DEBUG = false;\n// mkap namespace\nvar mkap = function () {\n\n    //class\n    function MomentKappa(cross_section, compressive_diagram, tensile_diagram) {\n        this.cross_section = cross_section;\n        this.compressive_diagram = compressive_diagram;\n        this.tensile_diagram = tensile_diagram;\n        // sum of the forces in the cross section\n        this.force_tensile = 0;\n        this.force_compression = 0;\n        this.normal_force = 0;\n        this.iterations = 250;\n        this.div = 3;\n\n        /*\r\n        * Reinforcement.\r\n        * For n layers of reinforcement, n parameters need to be initiated in the arrays.\r\n        */\n        this.rebar_As = [];\n        // distance rebar from the bottom of the master cross section\n        this.rebar_z = [];\n        // objects from the StressStrain class\n        this.rebar_diagram = [];\n        // phased rebar\n        this.m0 = [];\n        this.rebar_strain0_plt = [];\n        this.rebar_diam = null; // for the plotter\n\n        // Applied at t=0. 'werkvoorspanning'\n        this.prestress = [];\n\n        // Stress and strain in the reinforcement after Mp has been applied and the deformation is zero.\n        this.d_stress = [];\n        this.d_strain = [];\n        this.mp = 0;\n        // Used by session.js when prestress is applied.\n        this.original_rebar_diagrams = [];\n\n        /**\r\n        results\r\n        */\n        this.solution = null;\n        this.rebar_force = [];\n        this.rebar_strain = [];\n        this.stress = [];\n        this.moment = null;\n        this.kappa = null;\n        this.strain_top = null;\n        this.strain_btm = null;\n        this.zero_line = null; // xu is height - zero line\n        this.xu = null;\n\n        this.reduce_rebar = false;\n    }\n\n    MomentKappa.prototype.det_force_distribution = function (strain_top, strain_btm, reduce_rebar) {\n        /**\r\n         * Sum the tensile and compression forces based on the strain distribution\r\n         *\r\n         * @param strain_top: (float) Strain at the top of the cross section.\r\n         * @param strain_btm: (float) Strain at the bottom of the cross section.\r\n         * @param reduce_rebar: (bool) Subtract the reinforcement cross section of the whole cross section.\r\n         *\r\n         */\n        this.force_compression = 0;\n        this.force_tensile = 0;\n        this.stress = [];\n        this.rebar_strain = [];\n        this.strain_top = strain_top;\n        this.strain_btm = strain_btm;\n\n        // default parameter\n        reduce_rebar = typeof reduce_rebar !== \"undefined\" ? reduce_rebar : false;\n        this.reduce_rebar = reduce_rebar;\n\n        if (this.normal_force < 0) {\n            this.force_tensile += Math.abs(this.normal_force);\n        } else {\n            this.force_compression += Math.abs(this.normal_force);\n        }\n\n        // height of the sections\n        var dh = this.cross_section.y_val[1];\n\n        //cross section\n        var crs_btm = this.cross_section.y_val[0];\n        var crs_top = this.cross_section.y_val[this.cross_section.y_val.length - 1];\n\n        // iterate over the y-axis of the master cross section and determine the stresses.\n        // y-axis starts at bottom.\n        for (var i = 0; i < this.cross_section.y_val.length; i++) {\n\n            // interpolate the strain at this y-value\n            var strain_y = std.interpolate(crs_btm, strain_btm, crs_top, strain_top, this.cross_section.y_val[i]);\n\n            // Send the strain value as parameter in the stress strain diagram\n            if (strain_y < 0) {\n                stress = -this.compressive_diagram.det_stress(Math.abs(strain_y));\n                this.force_compression -= stress * this.cross_section.width_array[i] * dh;\n            } else {\n                stress = this.tensile_diagram.det_stress(strain_y);\n                this.force_tensile += stress * this.cross_section.width_array[i] * dh;\n            }\n            this.stress.push(stress);\n        }\n\n        // determine reinforcement forces\n        this.rebar_force = [];\n        for (i = 0; i < this.rebar_As.length; i++) {\n            var strain = std.interpolate(crs_btm, strain_btm, crs_top, strain_top, this.rebar_z[i]);\n            this.rebar_strain.push(strain + this.d_strain[i]);\n\n            var stress = this.rebar_diagram[i].det_stress(Math.abs(strain));\n\n            // absolute value\n            var force = this.rebar_As[i] * stress;\n\n            var stress_reduct;\n            if (strain < 0 && this.prestress[i] == 0) {\n                this.force_compression += force;\n                this.rebar_force.push(-force);\n\n                if (reduce_rebar) {\n                    // Subtract reinforcement area from master element\n                    stress_reduct = this.compressive_diagram.det_stress(Math.abs(strain));\n                    this.force_compression -= this.rebar_As[i] * stress_reduct;\n                }\n            } else {\n                this.force_tensile += force;\n                this.rebar_force.push(force);\n\n                if (reduce_rebar) {\n                    // Subtract reinforcement area from master element\n                    stress_reduct = this.tensile_diagram.det_stress(strain);\n                    this.force_tensile -= this.rebar_As[i] * stress_reduct;\n                }\n            }\n        }\n    };\n\n    MomentKappa.prototype.set_div = function (str) {\n        /**\r\n         * Up the allowed iterations at small strains. Due to asymptotic behaviour there are more iterations needed.\r\n         *\r\n         * @param str: (float) Strain.\r\n         */\n        if (Math.abs(str) < 0.15) {\n            this.iterations = 500;\n        } else {\n            this.iterations = 250;\n        }\n    };\n\n    MomentKappa.prototype.iterator_top_constant = function (btm_str, top_str) {\n        /**\r\n         * @param btm_str: (float) strain to start\r\n         * @param top_str: (float) strain to start\r\n         */\n\n        // If the reinforcement is above the zero line, there will sometimes be no tensile force\n        // Find the index of the highest reinforcement layer.\n        var top_reinf = Math.min.apply(null, this.rebar_z);\n        for (var i = 0; i < this.rebar_As.length; i++) {\n            if (this.rebar_z[i] == top_reinf) {\n                var rbr_index = i;\n            }\n        }\n\n        var count = 0;\n        // iterate until the convergence criteria is met\n        while (1) {\n            if (std.convergence_conditions(this.force_compression, this.force_tensile)) {\n                this.solution = true;\n                if (false) {\n                    if (false) {\n                        console.log(\"convergence after %s iterations\".replace(\"%s\", count));\n                    }\n                }\n                return [0, count]; // [success, count]\n            }\n\n            // Extrapolate the strain from the first significant rebar strain point, to the bottom strain.\n            // Needed when the rebar is above the neutral line.\n            else if (isNaN(this.force_tensile) || this.force_tensile == 0) {\n                    btm_str = std.interpolate(this.cross_section.top, top_str, top_reinf, this.rebar_diagram[rbr_index].strain[1], this.cross_section.bottom);\n                } else if (this.force_tensile > 0) {\n                    this.set_div(btm_str);\n                    var factor = std.convergence(this.force_tensile, this.force_compression, this.div);\n                    btm_str = btm_str * factor;\n                }\n\n            this.det_force_distribution(top_str, btm_str);\n            if (count > this.iterations) {\n                if (false) {\n                    console.log(\"no convergence found after %s iterations\".replace(\"%s\", count));\n                }\n                return [1, count];\n            }\n            count += 1;\n        }\n    };\n\n    MomentKappa.prototype.iterator_btm_constant = function (btm_str, top_str) {\n        /**\r\n         * @param btm_str: (float) strain to start\r\n         * @param top_str: (float) strain to start\r\n         */\n        var count = 0;\n        // iterate until the convergence criteria is met\n        while (1) {\n            if (std.convergence_conditions(this.force_compression, this.force_tensile)) {\n                this.solution = true;\n\n                if (false) {\n                    console.log(\"convergence after %s iterations\".replace(\"%s\", count));\n                }\n                return [0, count];\n            }\n\n            var factor = std.convergence(this.force_compression, this.force_tensile, this.div);\n            top_str = top_str * factor;\n\n            this.det_force_distribution(top_str, btm_str);\n\n            if (count > this.iterations) {\n                if (false) {\n                    console.log(\"no convergence found after %s iterations\".replace(\"%s\", count));\n                }\n                return [1, count];\n            }\n            count += 1;\n        }\n    };\n\n    MomentKappa.prototype.iterator_complete_pressure = function (top_str) {\n        /**\r\n         * Compression in bottom may not be higher than in top.\r\n         */\n\n        var btm_str = top_str;\n\n        this.det_force_distribution(top_str, btm_str);\n        if (this.force_tensile > this.force_compression) {\n            // No equilibrium possible with positive kappa.\n            return 1;\n        }\n\n        var count = 0;\n        // iterate until the convergence criteria is met\n\n        while (1) {\n            if (std.convergence_conditions(this.force_compression, this.force_tensile)) {\n                this.solution = true;\n\n                if (false) {\n                    console.log(\"convergence after %s iterations\".replace(\"%s\", count));\n                }\n                return [0, count];\n            }\n\n            this.set_div(btm_str);\n\n            var factor = std.convergence(this.force_compression, this.force_tensile, this.div);\n            btm_str = btm_str * factor;\n\n            this.det_force_distribution(top_str, btm_str);\n\n            if (count > this.iterations) {\n\n                if (false) {\n                    console.log(\"no convergence found after %s iterations\".replace(\"%s\", count));\n                }\n                return [1, count];\n            }\n            count += 1;\n        }\n    };\n\n    MomentKappa.prototype.solver = function (strain_top, strain) {\n        /**\r\n         * Return the .det_stress method several times and adapt the input until the convergence criteria is met.\r\n         *\r\n         * @param strain_top: (bool) Constant strain at the top. If true, the strain at the top will remain constant\r\n         *                      and the strain at the bottom will be iterated over. If false vice versa for strain_bottom.\r\n         * @param strain: (float) Constant strain at the top or bottom.\r\n         */\n\n        // default parameter\n        strain_top = typeof strain_top !== \"undefined\" ? strain_top : true;\n\n        this.solution = false;\n        var total_iter = 0;\n\n        // first iteration\n        var btm_str = strain;\n        var top_str = -strain;\n        this.det_force_distribution(top_str, btm_str);\n\n        // If the axial force is substantial start with a solver completely under pressure.\n        var a = this.compressive_diagram.det_stress(-top_str) * this.cross_section.area() * 0.75;\n        if (-this.normal_force > a) {\n            /**\r\n             * Try to solve for a cross section completely under pressure.\r\n             */\n\n            sol = this.iterator_complete_pressure(top_str);\n            if (sol[0] === 0) {\n                return sol[1];\n            } else {\n                total_iter += sol[1];\n\n                if (strain_top) {\n                    // top strain remains constant\n                    var sol = this.iterator_top_constant(btm_str, top_str);\n                    if (sol[0] === 0) {\n                        return sol[1];\n                    } else {\n                        total_iter += sol[1];\n                    }\n                } else {\n                    // bottom strain remains constant\n                    sol = this.iterator_btm_constant(btm_str, top_str);\n                    if (sol[0] === 0) {\n                        return sol[1];\n                    } else {\n                        total_iter += sol[1];\n                    }\n                }\n            }\n        }\n        // Standard control flow\n        else {\n\n                if (strain_top) {\n                    // top strain remains constant\n                    var sol = this.iterator_top_constant(btm_str, top_str);\n                    if (sol[0] === 0) {\n                        return sol[1];\n                    } else {\n                        total_iter += sol[1];\n                    }\n                } else {\n                    // bottom strain remains constant\n                    sol = this.iterator_btm_constant(btm_str, top_str);\n                    if (sol[0] === 0) {\n                        return sol[1];\n                    } else {\n                        total_iter += sol[1];\n                    }\n                }\n\n                if (!this.validity() && this.normal_force != 0) {\n                    /**\r\n                     * Try to solve for a cross section completely under pressure.\r\n                     */\n\n                    sol = this.iterator_complete_pressure(top_str);\n                    if (sol[0] === 0) {\n                        return sol[1];\n                    } else {\n                        total_iter += sol[1];\n                    }\n                }\n            }\n        return total_iter;\n    };\n\n    MomentKappa.prototype.det_m_kappa = function () {\n        /**\r\n        Determines the moment and kappa values.\r\n              For each sections center of gravity the moment around the origin is determined.\r\n          \r\n        ______     <---- - F compression \r\n        |     |         \r\n        |     |                           |y\r\n        |     |                           |\r\n        |_____|    ----> + F tensile      |0____x\r\n        \r\n        */\n\n        // center of gravity offset of a section\n        this.kappa = (-this.strain_top + this.strain_btm) / (this.cross_section.top - this.cross_section.bottom);\n        this.moment = this.mp;\n        var offset = this.cross_section.y_val[1] * 0.5;\n\n        // height of the sections\n        var dh = this.cross_section.y_val[1];\n\n        for (var i = 0; i < this.cross_section.y_val.length; i++) {\n            var arm = this.cross_section.y_val[i] + offset;\n            var force = this.stress[i] * this.cross_section.width_array[i] * dh;\n\n            this.moment += arm * force;\n        }\n\n        // N normal force share\n        this.moment -= this.normal_force * this.cross_section.zero_line();\n\n        // rebar share\n        for (i = 0; i < this.rebar_As.length; i++) {\n            this.moment += this.rebar_force[i] * this.rebar_z[i];\n\n            // reduction of master cross section at place of rebar\n            if (this.reduce_rebar) {\n                if (this.rebar_force[i] > 0) {\n                    // tensile stress\n                    var stress_reduct = this.tensile_diagram.det_stress(this.rebar_strain[i]);\n                    //this.moment -= stress_reduct * this.rebar_As[i] * this.rebar_z[i]\n                } else {\n                    // compression stress\n                    stress_reduct = -this.compressive_diagram.det_stress(Math.abs(this.rebar_strain[i]));\n                    //this.moment -= stress_reduct * this.rebar_As[i] * this.rebar_z[i]\n                }\n            }\n        }\n\n        this.moment *= -1;\n        // zero line\n        this.zero_line = std.interpolate(this.strain_btm, this.cross_section.bottom, this.strain_top, this.cross_section.top, 0);\n        this.xu = this.cross_section.top - this.zero_line;\n    };\n\n    MomentKappa.prototype.validity = function () {\n        /**\r\n         * Check if the found equilibrium solution could be regarded as valid.\r\n         *\r\n         * @type {boolean}\r\n         */\n        var valid = true;\n        if (std.is_number(this.moment) && std.is_number(this.kappa) && this.solution && this.strain_top >= -this.compressive_diagram.strain[this.compressive_diagram.strain.length - 1] && this.strain_top < 0) {\n            for (var i in this.rebar_strain) {\n                if (Math.abs(this.rebar_strain[i]) > Math.max.apply(null, this.rebar_diagram[i].strain)) {\n                    valid = false;\n                }\n            }\n\n            if (std.is_close(this.strain_btm, 0, 0.01, 0.01)) {\n                if (this.xu >= this.cross_section.top - this.cross_section.bottom) {\n                    return false;\n                }\n            }\n        } else {\n            valid = false;\n        }\n        return valid;\n    };\n\n    MomentKappa.prototype.instantiate_standard_reinforcement = function (As, rebar_z, rebar_diagram) {\n        /**\r\n         * Instantiate standard moment kappa solver. Because of the extra options regarding phased moments, prestress\r\n         * etc. some extra parameters need to be instantiated.\r\n         *\r\n         * @param As: {Array} Area of the reinforcement per layer.\r\n         * @param rebar_z: {Array} Height of the reinforcement layer with respect to the bottom of the cross section.\r\n         * @param rebar_diagram: {StressStrain} Diagram object.\r\n         */\n\n        this.rebar_z = rebar_z;\n        this.rebar_As = As;\n\n        this.prestress = this.m0 = this.d_stress = this.d_strain = Array.apply(null, Array(As.length)).map(Number.prototype.valueOf, 0);\n\n        this.rebar_diagram = Array.apply(null, Array(As.length)).map(function () {\n            return rebar_diagram;\n        });\n    };\n\n    function StressStrain(strain, stress) {\n        /**\r\n         * Class for creating stress strain diagrams.\r\n         *\r\n         * @param strain: (array) Strain values of the diagram.\r\n         * @param stress: (array) Stress values of the diagram.\r\n        */\n\n        this.strain = strain;\n        this.stress = stress;\n    }\n\n    StressStrain.prototype.det_stress = function (strain) {\n        /**\r\n         * @param strain: (float) Strain for which the stress needs to be determined.\r\n         * Iterate through the strain array until iterated value exceeds the requested strain.\r\n         * At that the point the two values will interpolated.\r\n         */\n\n        for (var i = 0; i < this.strain.length; i++) {\n            if (strain > this.strain[this.strain.length - 1]) {\n                return 0;\n            } else if (this.strain[i] == strain) {\n                return this.stress[i];\n            } else if (this.strain[i] > strain) {\n                return std.interpolate(this.strain[i - 1], this.stress[i - 1], this.strain[i], this.stress[i], strain);\n            }\n        }\n    };\n\n    StressStrain.prototype.det_strain = function (stress) {\n        /**\r\n         * @param stress: (float) Strain for which the stress needs to be determined.\r\n         * Iterate through the stress array until iterated value exceeds the requested strain.\r\n         * At that the point the two values will interpolated.\r\n         */\n        for (var i = 0; i < this.stress.length; i++) {\n            if (stress > this.stress[this.stress.length - 1]) {\n                return 0;\n            } else if (this.stress[i] == stress) {\n                return this.strain[i];\n            } else if (this.stress[i] > stress) {\n                return std.interpolate(this.stress[i - 1], this.strain[i - 1], this.stress[i], this.strain[i], stress);\n            }\n        }\n    };\n\n    function calcHookup(reduction, mkap, top) {\n        /**\r\n         * Reduction factor (float)\r\n         *\r\n         * Starts the calculation with the latest point of the compression material and reduces it until a solution is found.\r\n         * Returns the strain that resulted in a valid solution.\r\n         *\r\n         * @param reduction: {float} the reduction factor of the strain.\r\n         * @param mkap: {object} from the MomentKappa class.\r\n         * @param top: {bool} Depends if the hookup is sought for the top or the bottom of the cross section.\r\n         */\n        top = typeof top !== \"undefined\" ? top : true;\n        var strain;\n        if (top) {\n            strain = mkap.compressive_diagram.strain[mkap.compressive_diagram.strain.length - 1];\n        } else {\n            strain = mkap.tensile_diagram.strain[mkap.tensile_diagram.strain.length - 1];\n        }\n\n        mkap.solver(top, strain);\n        mkap.det_m_kappa();\n\n        var count = 0;\n        while (!mkap.validity() && count < 150) {\n            mkap.solver(top, strain);\n            mkap.det_m_kappa();\n            strain *= 1 - reduction;\n            count += 1;\n        }\n        return strain;\n    }\n\n    return { MomentKappa: MomentKappa,\n        StressStrain: StressStrain,\n        calcHookup: calcHookup\n    };\n}(); // mkap namespace\n\n\nmodule.exports = {\n    std: std,\n    mkap: mkap,\n    vector: vector,\n    crsn: crsn\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 1 */
/* unknown exports provided */
/* all exports used */
/*!******************************!*\
  !*** ./src/column_nen_en.js ***!
  \******************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _mnkappa = __webpack_require__(/*! ./mnkappa.js */ 2);\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar vanilla = __webpack_require__(/*! ./vanilla_mkap.min.js */ 0);\n\nvar fyd = 435;\nvar eps_yd = fyd / 2e5;\n\nfunction detM0e(m1, m2) {\n    /*\n     * Determine M0e conform NEN-EN 1992-1-1 art. 5.8.8.2(2).\n     *\n     * @param m1: (float) Bending moment at top or bottom of column.\n     * @param m2: (float) Bending moment at top or bottom of column.\n     * */\n    var m02 = Math.max(m1, m2);\n    var m01 = Math.min(m1, m2);\n    var m0e = 0.6 * m02 + 0.4 * m01;\n    return m0e > 0.4 * m02 ? m0e : 0.4 * m0e;\n}\n\nvar ColumnNENEN = function () {\n    /*\n     * Compute the minimum required column dimension conform NEN-EN.\n     * Units:\n     *  N\n     *  mm\n     *  %\n     *\n     */\n    function ColumnNENEN(m1, m2, ned, fck, rho, l0) {\n        var _this = this;\n\n        _classCallCheck(this, ColumnNENEN);\n\n        this.solve = function () {\n            /*\n             * Solve for the minimum required dimensions. First for Ned. If with these dimensions Med > Mrd, determine\n             * the dimension based on Med.\n             */\n            var fcd = _this.fck / 1.5;\n            var fc = (0, _mnkappa.diagramConcreteBiLinearULS)(fcd);\n            var b = 1000;\n            var c = 0;\n            var area = void 0;\n            var m = void 0;\n            var as = void 0;\n            var nrd = void 0;\n\n            var assign = function assign() {\n                _this.validity = true;\n                _this.width = b;\n                _this.As = as;\n                _this.mrd = m.moment;\n                _this.nrd = nrd;\n            };\n\n            // Iterate the minimum required dimension for the axial force.\n            while (true) {\n                area = Math.pow(b, 2);\n                nrd = _this.axialForceResistance(area);\n                if (vanilla.std.convergence_conditions(nrd, -_this.ned, 1.01, 0.99)) {\n                    as = _this.rho * area / 2;\n                    var cs = (0, _mnkappa.rectangle)(b, b);\n                    m = (0, _mnkappa.m_n_kappa)(cs, fc, _mnkappa.diagramNoConcreteTension, _mnkappa.B500, [as, as], [0.2 * b, 0.8 * b], _this.ned);\n                    (0, _mnkappa.calcHookup)(0.05, m);\n                    m.det_m_kappa();\n                    console.log(\"convergence\", m.moment / 1e6, \"count\", c);\n                    assign();\n                    break;\n                }\n                b *= vanilla.std.convergence(nrd, -_this.ned);\n                c++;\n\n                if (c > 200) {\n                    break;\n                }\n            }\n\n            // Validate if the the minimum required cross section for the axial force is able to bear the total moment.\n            _this.i = b / 3.46;\n            var M2 = _this.det_params(area).M2;\n            var M0EdM2 = Math.max(_this.m0ed + M2, _this.m2, _this.m1 + 0.5 * M2);\n            if (m.moment > M0EdM2) {\n                // The cross section is sufficient.\n                console.log(\"Minimal axial force is sufficient\");\n            } else {\n                c = 0;\n\n                while (true) {\n                    _this.i = b / 3.46;\n                    area = Math.pow(b, 2);\n                    as = _this.rho * area / 2;\n                    var _cs = (0, _mnkappa.rectangle)(b, b);\n\n                    m = (0, _mnkappa.m_n_kappa)(_cs, fc, _mnkappa.diagramNoConcreteTension, _mnkappa.B500, [as, as], [0.2 * b, 0.8 * b], _this.ned);\n                    (0, _mnkappa.calcHookup)(0.05, m);\n                    m.det_m_kappa();\n\n                    var _M = _this.det_params(area).M2;\n                    var _M0EdM = Math.max(_this.m0ed + _M, _this.m2, _this.m1 + 0.5 * _M);\n\n                    var factor = vanilla.std.convergence(m.moment, _M0EdM, 4);\n                    //console.log(\"factor: \", factor);\n                    b *= factor;\n\n                    // if (this.axialForceResistance(area) < -this.ned) {\n                    //     console.log(vanilla.std.convergence(this.axialForceResistance(area), -this.ned), this.axialForceResistance(area)/1e3);\n                    //     console.log(\"minimal axial force dimension\");\n                    //     break\n                    // }\n\n                    if (vanilla.std.convergence_conditions(_M0EdM, m.moment, 1.01, 0.99) && m.validity()) {\n                        console.log(\"convergence\");\n                        assign();\n                        break;\n                    }\n\n                    //console.log(M0EdM2, m.moment, m.validity(), b);\n\n                    if (!isFinite(b)) {\n                        _this.validity = false;\n                        console.log(\"break\");\n                        break;\n                    }\n                    c++;\n\n                    if (c > 250) {\n                        _this.validity = false;\n                        console.log(\"max iter\");\n                        break;\n                    }\n                }\n            }\n        };\n\n        this.m1 = m1;\n        this.m2 = m2;\n        this.ned = ned;\n        this.fck = fck;\n        this.rho = rho;\n        this.l0 = l0;\n        this.m0ed = detM0e(m1, m2);\n\n        this.i = 0; // needs to be determined before det params\n\n        // results\n        this.validity = false;\n        this.width = null;\n        this.As = null;\n    }\n\n    _createClass(ColumnNENEN, [{\n        key: \"det_params\",\n        value: function det_params(area) {\n            /*\n             * Determine the NEN-EN parameters. All the parameters are required to determine M2. These are assigned for\n             * readability.\n             *\n             */\n            // Kr\n            var n = this.ned / (area * this.fck / 1.5);\n            this.as = area * this.rho;\n            this.omega = this.as * fyd / (area * this.fck / 1.5);\n            var n_u = 1 + this.omega;\n            var n_bal = 0.4;\n            var kr = (n_u - n) / (n_u - n_bal) < 1 ? (n_u - n) / (n_u - n_bal) : 1;\n\n            // K_phi\n            var lambda = this.l0 / this.i;\n            var beta = 0.35 + this.fck / 200 - lambda / 150;\n            var phi_eff = 2.5;\n            var k_phi = 1 + beta * phi_eff;\n\n            var d = 0.8 * Math.sqrt(area); // only with squares.\n            var _1_div_r0 = eps_yd / (0.45 * d);\n            var _1_div_r = kr * k_phi * _1_div_r0;\n            var e2 = _1_div_r * Math.pow(this.l0, 2) / Math.pow(Math.PI, 2);\n            var M2 = -this.ned * e2;\n            return { \"M2\": M2 };\n        }\n    }, {\n        key: \"axialForceResistance\",\n        value: function axialForceResistance(area) {\n            return area * this.fck / 1.5 + area * this.rho * _mnkappa.B500.det_stress(1.75);\n        }\n    }]);\n\n    return ColumnNENEN;\n}();\n\nexports.default = ColumnNENEN;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 2 */
/* unknown exports provided */
/* all exports used */
/*!************************!*\
  !*** ./src/mnkappa.js ***!
  \************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar vanilla = __webpack_require__(/*! ./vanilla_mkap.min.js */ 0);\n\nfunction rectangle(b, h) {\n    /**\n    * Create a cross section required for the M-N-Kappa solver.\n    *\n    * @param a: (float) Width of the cross section\n    * @param b: (float) Height of the cross section\n    * */\n\n    var pg = [[0, 0], [0, b], [h, b], [h, 0], [0, 0]];\n\n    for (var i in pg) {\n        pg[i] = new vanilla.vector.Point(pg[i][0], pg[i][1]);\n    }\n    return new vanilla.crsn.PolyGon(pg);\n}\n\nfunction m_n_kappa(cs, fc, fct, fs, as, z, ned) {\n    /**\n    * Prepare a m_n_kappa instance.\n    *\n    * @param cs: (Polygon)\n    * @param fc: (StressStrain) Concrete compressive stress strain diagram.\n    * @param fct: (StressStrain) Concrete tensile stress strain diagram.\n    * @param fs: (StressStrain) Reinforcement stress strain diagram.\n    * @param as: (Array) Array with area values of the reinforcement.\n    * @param z: (Array) Distance of the reinforcement from the bottom of the cross section.\n    * @param ned: (float) Axial force value.\n    *\n    * @returns moment kappa instance\n    * */\n\n    var m = new vanilla.mkap.MomentKappa(cs, fc, fct);\n    m.instantiate_standard_reinforcement(as, z, fs);\n    m.normal_force = ned;\n\n    return m;\n}\n\nfunction diagramConcreteBiLinearULS(stress) {\n    return new vanilla.mkap.StressStrain([0, 1.75, 3.5], [0, stress, stress]);\n}\n\nvar diagramNoConcreteTension = new vanilla.mkap.StressStrain([0, 0], [0, 0]);\nvar B500 = new vanilla.mkap.StressStrain([0, 2.175, 25], [0, 435, 435]);\nvar calcHookup = vanilla.mkap.calcHookup;\n\nexports.rectangle = rectangle;\nexports.m_n_kappa = m_n_kappa;\nexports.diagramConcreteBiLinearULS = diagramConcreteBiLinearULS;\nexports.B500 = B500;\nexports.diagramNoConcreteTension = diagramNoConcreteTension;\nexports.calcHookup = calcHookup;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvbW5rYXBwYS5qcz81OWE3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xubGV0IHZhbmlsbGEgPSByZXF1aXJlKFwiLi92YW5pbGxhX21rYXAubWluLmpzXCIpO1xuXG5mdW5jdGlvbiByZWN0YW5nbGUoYiwgaCkge1xuICAgIC8qKlxuICAgICogQ3JlYXRlIGEgY3Jvc3Mgc2VjdGlvbiByZXF1aXJlZCBmb3IgdGhlIE0tTi1LYXBwYSBzb2x2ZXIuXG4gICAgKlxuICAgICogQHBhcmFtIGE6IChmbG9hdCkgV2lkdGggb2YgdGhlIGNyb3NzIHNlY3Rpb25cbiAgICAqIEBwYXJhbSBiOiAoZmxvYXQpIEhlaWdodCBvZiB0aGUgY3Jvc3Mgc2VjdGlvblxuICAgICogKi9cblxuICAgIGxldCBwZyA9IFtbMCwgMF0sIFswLCBiXSwgW2gsIGJdLCBbaCwgMF0sIFswLCAwXV07XG5cbiAgICBmb3IgKGxldCBpIGluIHBnKSB7XG4gICAgICAgIHBnW2ldID0gbmV3IHZhbmlsbGEudmVjdG9yLlBvaW50KHBnW2ldWzBdLCBwZ1tpXVsxXSlcbiAgICB9XG4gICAgcmV0dXJuIG5ldyB2YW5pbGxhLmNyc24uUG9seUdvbihwZylcbn1cblxuZnVuY3Rpb24gbV9uX2thcHBhKGNzLCBmYywgZmN0LCBmcywgYXMsIHosIG5lZCkge1xuICAgIC8qKlxuICAgICogUHJlcGFyZSBhIG1fbl9rYXBwYSBpbnN0YW5jZS5cbiAgICAqXG4gICAgKiBAcGFyYW0gY3M6IChQb2x5Z29uKVxuICAgICogQHBhcmFtIGZjOiAoU3RyZXNzU3RyYWluKSBDb25jcmV0ZSBjb21wcmVzc2l2ZSBzdHJlc3Mgc3RyYWluIGRpYWdyYW0uXG4gICAgKiBAcGFyYW0gZmN0OiAoU3RyZXNzU3RyYWluKSBDb25jcmV0ZSB0ZW5zaWxlIHN0cmVzcyBzdHJhaW4gZGlhZ3JhbS5cbiAgICAqIEBwYXJhbSBmczogKFN0cmVzc1N0cmFpbikgUmVpbmZvcmNlbWVudCBzdHJlc3Mgc3RyYWluIGRpYWdyYW0uXG4gICAgKiBAcGFyYW0gYXM6IChBcnJheSkgQXJyYXkgd2l0aCBhcmVhIHZhbHVlcyBvZiB0aGUgcmVpbmZvcmNlbWVudC5cbiAgICAqIEBwYXJhbSB6OiAoQXJyYXkpIERpc3RhbmNlIG9mIHRoZSByZWluZm9yY2VtZW50IGZyb20gdGhlIGJvdHRvbSBvZiB0aGUgY3Jvc3Mgc2VjdGlvbi5cbiAgICAqIEBwYXJhbSBuZWQ6IChmbG9hdCkgQXhpYWwgZm9yY2UgdmFsdWUuXG4gICAgKlxuICAgICogQHJldHVybnMgbW9tZW50IGthcHBhIGluc3RhbmNlXG4gICAgKiAqL1xuXG4gICAgbGV0IG0gPSBuZXcgdmFuaWxsYS5ta2FwLk1vbWVudEthcHBhKGNzLCBmYywgZmN0KTtcbiAgICBtLmluc3RhbnRpYXRlX3N0YW5kYXJkX3JlaW5mb3JjZW1lbnQoYXMsIHosIGZzKTtcbiAgICBtLm5vcm1hbF9mb3JjZSA9IG5lZDtcblxuICAgIHJldHVybiBtXG59XG5cblxuZnVuY3Rpb24gZGlhZ3JhbUNvbmNyZXRlQmlMaW5lYXJVTFMoc3RyZXNzKSB7XG4gICAgcmV0dXJuIG5ldyB2YW5pbGxhLm1rYXAuU3RyZXNzU3RyYWluKFswLCAxLjc1LCAzLjVdLCBbMCwgc3RyZXNzLCBzdHJlc3NdKVxufVxuXG5jb25zdCBkaWFncmFtTm9Db25jcmV0ZVRlbnNpb24gPSBuZXcgdmFuaWxsYS5ta2FwLlN0cmVzc1N0cmFpbihbMCwgMF0sIFswLCAwXSk7XG5jb25zdCBCNTAwID0gbmV3IHZhbmlsbGEubWthcC5TdHJlc3NTdHJhaW4oWzAsIDIuMTc1LCAyNV0sIFswLCA0MzUsIDQzNV0pO1xubGV0IGNhbGNIb29rdXAgPSB2YW5pbGxhLm1rYXAuY2FsY0hvb2t1cDtcblxuZXhwb3J0IHtyZWN0YW5nbGUsIG1fbl9rYXBwYSwgZGlhZ3JhbUNvbmNyZXRlQmlMaW5lYXJVTFMsIEI1MDAsIGRpYWdyYW1Ob0NvbmNyZXRlVGVuc2lvbiwgY2FsY0hvb2t1cH1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gc3JjL21ua2FwcGEuanMiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7Ozs7OztBQWNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 3 */
/* unknown exports provided */
/* all exports used */
/*!****************************************!*\
  !*** ./~/babel-loader!./src/worker.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _column_nen_en = __webpack_require__(/*! ./column_nen_en.js */ 1);\n\nvar _column_nen_en2 = _interopRequireDefault(_column_nen_en);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Method that accepts the PostMessage event\nonmessage = function onmessage(e) {\n    console.log(\"Starting calculation on worker\");\n    var calc = new _column_nen_en2.default(e.data.M1 * 1e6, e.data.M2 * 1e6, e.data.Ned * 1e3 * e.data.UC, e.data.concrete, e.data.rho / 1e2, e.data.l0 * 1e3);\n    calc.solve();\n};//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvd29ya2VyLmpzPzViZmIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbHVtbk5FTkVOIGZyb20gXCIuL2NvbHVtbl9uZW5fZW4uanNcIlxuXG4vLyBNZXRob2QgdGhhdCBhY2NlcHRzIHRoZSBQb3N0TWVzc2FnZSBldmVudFxub25tZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcbiAgICBjb25zb2xlLmxvZyhcIlN0YXJ0aW5nIGNhbGN1bGF0aW9uIG9uIHdvcmtlclwiKVxuICAgIGxldCBjYWxjID0gbmV3IENvbHVtbk5FTkVOKGUuZGF0YS5NMSAqIDFlNiwgZS5kYXRhLk0yICogMWU2LCBlLmRhdGEuTmVkICogMWUzICogZS5kYXRhLlVDLCBlLmRhdGEuY29uY3JldGUsXG4gICAgICAgIGUuZGF0YS5yaG8gLyAxZTIsIGUuZGF0YS5sMCAqIDFlMyk7XG4gICAgY2FsYy5zb2x2ZSgpO1xuXG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHNyYy93b3JrZXIuanMiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUEiLCJzb3VyY2VSb290IjoiIn0=");

/***/ })
/******/ ]);